1     Scheduling ALgorithms

1.1   General Formulas

Processor utilization factor: U = sommatoria(Ci/Ti);

Turnaround Time: Ta = Ending of a task - Arrival time;

Waiting Time: Ta - Burst Time;

Processor utilization factor with the proportion: U = BurstTime/Ttot = (Ttot - Idle time)/Ttot

Lateness:	End of eecution time - Deadline




1.3    Traditional non real time scheduling
    1. FCFS (First Come First Served):
       (a) Non preemptive
       (b) Schedules processes in arrival order
    2. SJF (Shortest Job First):
       (a) Non preemptive
       (b) It schedules the shortest job available in ready queue
    3. RR (Round Robin):
      (a) Preemptive
      (b) It assign a quantum of a given time to each tasks
    4. Non Preemptive Priority:
      (a) Non preemptive
      (b) based on the task’s priority

1.4   Periodic Tasks
  1. Timeline Scheduling:
      (a) No preemption
      (b) it is based on major cycle and minor cycle
         i.  Minor cycle = GCD (Ti )
         ii. Major cycle = LCM (Ti )
      (c) Usable if all tasks starts at time zero
      (d) NB = Each periodic tasks cannot be conditioned by other periodic tasks.
  2. Rate Monotonic:
      (a) Preemptive
      (b) Deadline = Period
      (c) Tasks have static priorities computed before running
      
      		P = 1/T;
      		
      (d) How to calculate feasibility - Sufficient condition
      
      		Produttoria(Ui + 1) <= 2;
      		
      (e) How to calculate feasibility - Necessary condition:
      (f) Absolute deadline = Time of its next release di,j = ri,j+1
      (g) Relative deadline = Period
      (h) Overflow = Task misses his deadline at time t.
  3. EDF (Earliest deadline first):
      (a) Preemptive
      (b) Deadline = Period
      (c) Dynamic priority
      (d) the task with earliest deadline has higher priority
      (e) How to calculate feasibility:
      
      		sommatoria(Ci/Ti) <= 1;
      		
1.5   Aperiodic Tasks
  1. Jackson Algorithm:
      (a) No preemption
      (b) All tasks arrive at the same time
      (c) Objective = minimize maximum lateness
      (d) We use EDD (Earliest Due Date) = Task execution based on increasing deadline. The one that has the earliest deadline has to be scheduled before
      (e) Lateness parameter = it has to be computed for each task. The objective is to minimize the maximum lateness
  2. Horn’s algorithm:
      (a) Preemptive
      (b) Tasks have different arrival times
      (c) Objective = minimize maximum lateness
      (d) We use EDF (Earliest Deadline First) = see above strunz

1.6   Hybrid tasks
  1. Background scheduling:
      (a) Periodic tasks are scheduled using RM
      (b) Aperiodic tasks are scheduled during idle time
  2. Polling server:
      (a) Periodic tasks are scheduled using RM
      (b) Aperiodic tasks are managed thanks to a specific periodic task named server.
      (c) Priority is given to the periodic tasks (Real ones). If no aperiodic task is waiting in the ready queue, the time of the server is skipped.
      (d) How to calculate feasibility:
      
        Produttoria(Ui + 1) <= 2/(Us + 1);
      
      (e) Dimensioning the polling server:
      
      	P = produttoria(Ui + 1);
      
      	Us max = (2 - P)/P   = Cs/Ts
      
        You have to choose the values of Cs and Ts in order to respect Usmax .

3. Deferable server:
   (a) Priority is given to the aperiodic tasks.
   (b) Server capacity is mantained till the end of its period.
   (c) How to calculate feasibility:
   
   	    produttoria(Ui + 1) <= (Us + 2)/(2Us + 1);
   
   (d) Dimensioning the deferrable server:
   	
   	    P = produttoria(Ui + 1);
   	
   	    Us max = (2 - P)/(2P - 1)  = Cs/Ts

