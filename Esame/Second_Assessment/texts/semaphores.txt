Mutex (Mutual Exclusion Semaphore):
	- Ownership Semantics
	- A Mutex has the concept of ownership
	- The task that locks (takes) the Mutex must be the one to unlock (give) it
	- Provides priority inheritance to prevent priority inversion
	- Designed specifically for protecting shared resources

Binary Semaphore:
	- Signaling Mechanism
	- No ownership concept
	- Can be taken and given by different tasks
	- Used more for synchronization and signaling between tasks
	- Does not provide priority inheritance by default

Key Behavioral Differences:
- Mutex ensures that only one task can access a shared resource at a time, with clear ownership rules
- Binary Semaphore is more of a simple signaling mechanism for task synchronization

Practical Use Cases:
- Mutex: Protecting critical sections, shared data structures
- Binary Semaphore: Synchronizing tasks, signaling events, coordinating task interactions


Code:

// Create a Mutex with priority inheritance
xSemaphoreHandle xMutex = xSemaphoreCreateMutex();

// In low-priority task
if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE) {
    // Critical section protected
    // Mutex automatically handles priority inheritance
    xSemaphoreGive(xMutex);
}