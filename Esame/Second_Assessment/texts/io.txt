1. Purpose of I/O in Embedded Systems

- An embedded system must interact with the external world through input and output mechanisms
- Key I/O Functions:
    1. Input Functions:
        - Sense external world (measure physical quantities like temperature, humidity, pressure)
        - React to user input (button presses, switch states)
        - Receive commands or communications (serial communication, data streams)
    2. Output Functions:
        - Drive external actuators (motors, LEDs, audio devices, heaters, coolers)
        - Signal events (using LEDs, etc.)
        - Transmit information (serial communication, data streams)

---------------------------------------------------------------------------

2. Typical I/O Protocols in Embedded Systems

- UART (Universal Asynchronous Receiver Transmitter)
	- Protocol Characteristics:
    	- Serial, asynchronous communication
    	- Uses 2 wires (transmission and reception)
    	- Low-medium speed (9600 bps to several Mbps)
	- Typical Applications:
    	- Point-to-point communication for debugging
    	- Data transfer between microcontroller and PC
    	- Communication with low-speed modules

- SPI (Serial Peripheral Interface)
	- Protocol Characteristics:
    	- Serial, synchronous communication
    	- Uses 4 wires (MISO, MOSI, SS, SCLK)
    	- High speed (up to tens of Mbps)
	- Typical Applications:
    	- High-speed communication with flash memory
    	- Communication with sensors
    	- Analog/Digital converters
    	- High-speed display communication

- I2C (Inter-Integrated Circuit)
	- Protocol Characteristics:
	    - Serial, synchronous communication
	    - Multi-master, multi-slave capable
	    - Uses 2 wires (SDA, SCL)
	    - Speed: 100 kbps to 5 Mbps
	- Typical Applications:
	    - Low-speed communication between multiple devices
	    - Connecting sensors, displays, flash memory to microcontrollers

- CAN (Controller Area Network)
	- Protocol Characteristics:
	    - Serial, asynchronous communication
	    - Multi-master
	    - 2 wires (CAN high, CAN low) with differential signal
	    - Speed up to 1 Mbps
	- Typical Applications:
	    - Automotive and industrial systems
	    - Reliable, noise-resistant data transfer
	    - Communication between Electronic Control Units (ECUs)

- ADC/DAC (Analog to Digital/Digital to Analog Converter)
	- Protocol Characteristics:
	    - Converts analog signals to digital and vice versa
	    - Speed configurable (Hz to MHz)
	- Typical Applications:
	    - ADC: Reading analog sensor data (temperature, pressure, humidity)
	    - DAC: Audio output, control signals, generating test waveforms

- GPIO (General Purpose Input/Output)
	- Protocol Characteristics:
	    - Digital I/O controllable by software
	    - Configurable as input or output
	    - Can generate interrupts
	- Typical Applications:
	    - Controlling LEDs
	    - Reading button states
	    - Driving relays
	    - Interfacing with digital sensors or switches

---------------------------------------------------------------------------

4. Memory-Mapped I/O (MMIO)

- Peripheral devices share address space with main memory
- Flexible: Easy to add new peripherals
- Accessed via simple load and store instructions
- Address decoder selects specific peripheral registers

---------------------------------------------------------------------------

5. I/O Interaction: Polling vs Interrupt

# Polling

- CPU periodically checks peripheral status
- Advantages: Simple to implement
- Disadvantages:
    - High latency
    - Wastes CPU time
    - Devices checked serially

# Interrupt

- Peripheral uses dedicated line to request CPU attention
- Advantages:
    - Low latency
    - Efficient CPU usage
- Disadvantages:
    - Higher hardware complexity

---------------------------------------------------------------------------

6. Data Transfer Methods

- Character-based: Transfer one word at a time
- Block-based: Transfer data clusters
- Transfer performed by:
    1. CPU directly
    2. DMA (Direct Memory Access)

# DMA Transfer Modes

- Burst: Entire data block transferred contiguously
- Cycle Stealing: Transfers one byte, releases bus
- Transparent: Transfers during CPU idle cycles
